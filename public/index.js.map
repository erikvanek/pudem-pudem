{
  "version": 3,
  "sources": ["index.ts"],
  "sourcesContent": ["import { InputDevice, Interaction, UserEvent } from \"./types\";\n\nconst listInputsAndOutputs = (midiAccess) => {\n    console.log(midiAccess)\n    let logging = false;\n    for (const entry of midiAccess.inputs) {\n        const input = entry[1];\n        console.log(`Input port [type:'${input.type}']` +\n            ` id:'${input.id}'` +\n            ` manufacturer:'${input.manufacturer}'` +\n            ` name:'${input.name}'` +\n            ` version:'${input.version}'`);\n        // startLoggingMIDIInput(midiAccess, input.type)\n        if (!logging) {\n            logging = true\n            // startLoggingNovationInput(midiAccess, input.type)\n            console.log(midiAccess)\n        }\n    }\n}\n\nconst isAkaiMidiMix = (input: WebMidi.MIDIInput) => input.name === 'MIDI Mix' && input.manufacturer === 'AKAI'\n\n\nconst onElektronMessage: (e: WebMidi.MIDIMessageEvent) => void = (e) => {\n    const [userAction, controlId, value] = e.data\n    console.log([...e.data])\n    let interaction: Interaction | null = null;\n    if (userAction === 144) {\n        interaction = 'PushDown'\n    } else if (userAction === 128) {\n        interaction = 'PushUp'\n    } else if (userAction === 176) {\n        interaction = 'Tweak'\n    }\n\n    const event: UserEvent = {\n        interaction,\n        controlId,\n        value\n    }\n\n    // console.log(event)\n\n}\n\nconst onMidiNovationMessage: (e: WebMidi.MIDIMessageEvent) => void = (e) => {\n    const [userAction, controlId, value] = e.data\n    // console.log(e.data)\n    let interaction: Interaction | null = null;\n    if (userAction === 144) {\n        interaction = 'PushDown'\n    } else if (userAction === 128) {\n        interaction = 'PushUp'\n    } else if (userAction === 176) {\n        interaction = 'Tweak'\n    }\n\n    const event: UserEvent = {\n        interaction,\n        controlId,\n        value\n    }\n\n    console.log(event)\n\n}\n\nconst runWebMidiApi = () => navigator.requestMIDIAccess().then((midiAccess) => {\n    console.log('web midi api running')\n    for (const entry of midiAccess.inputs) {\n        const input = entry[1];\n        console.log(entry)\n        const device: InputDevice = { input, controls: [] }\n        // input.onmidimessage = onMidiNovationMessage\n        if (isAkaiMidiMix(input)) {\n            startLoggingAkaiMidiMix(device)\n        }\n        else {\n            startLoggingElektron(device)\n        }\n    }\n}, console.error);\n\n\nconst startLoggingAkaiMidiMix = (device: InputDevice) => {\n    device.input.onmidimessage = onMidiNovationMessage\n}\nconst startLoggingElektron = (device: InputDevice) => {\n    device.input.onmidimessage = onElektronMessage\n}\n\n\n\nconst runAudioApi = async () => {\n    const media = await navigator.mediaDevices.getUserMedia({\n        audio: true\n    })\n    const audioCtx = new AudioContext()\n    var source = audioCtx.createMediaStreamSource(media);\n\n    const analyser = audioCtx.createAnalyser();\n    analyser.fftSize = 2048;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n    analyser.getByteTimeDomainData(dataArray);\n    source.connect(analyser);\n\n    const canvas = document.getElementById(\"oscilloscope\")! as HTMLCanvasElement;\n    const canvasCtx = canvas.getContext(\"2d\")!;\n\n    function draw() {\n        requestAnimationFrame(draw);\n\n        analyser.getByteTimeDomainData(dataArray);\n\n        canvasCtx.fillStyle = \"rgb(200, 200, 200)\";\n        canvasCtx.fillRect(0, 0, canvas.width, canvas.height);\n\n        canvasCtx.lineWidth = 2;\n        canvasCtx.strokeStyle = \"rgb(0, 0, 0)\";\n\n        canvasCtx.beginPath();\n\n        const sliceWidth = (canvas.width * 1.0) / bufferLength;\n        let x = 0;\n\n        for (let i = 0; i < bufferLength; i++) {\n            const v = dataArray[i] / 128.0;\n            const y = (v * canvas.height) / 2;\n\n            if (i === 0) {\n                canvasCtx.moveTo(x, y);\n            } else {\n                canvasCtx.lineTo(x, y);\n            }\n\n            x += sliceWidth;\n        }\n\n        canvasCtx.lineTo(canvas.width, canvas.height / 2);\n        canvasCtx.stroke();\n    }\n\n    draw()\n\n}\n\nrunWebMidiApi()\n\n// runAudioApi()"],
  "mappings": ";;AAqBA,MAAM,gBAAgB,CAAC,UAA6B,MAAM,SAAS,cAAc,MAAM,iBAAiB;AAGxG,MAAM,oBAA2D,CAAC,MAAM;AACpE,UAAM,CAAC,YAAY,WAAW,KAAK,IAAI,EAAE;AACzC,YAAQ,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC;AACvB,QAAI,cAAkC;AACtC,QAAI,eAAe,KAAK;AACpB,oBAAc;AAAA,IAClB,WAAW,eAAe,KAAK;AAC3B,oBAAc;AAAA,IAClB,WAAW,eAAe,KAAK;AAC3B,oBAAc;AAAA,IAClB;AAEA,UAAM,QAAmB;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAAA,EAIJ;AAEA,MAAM,wBAA+D,CAAC,MAAM;AACxE,UAAM,CAAC,YAAY,WAAW,KAAK,IAAI,EAAE;AAEzC,QAAI,cAAkC;AACtC,QAAI,eAAe,KAAK;AACpB,oBAAc;AAAA,IAClB,WAAW,eAAe,KAAK;AAC3B,oBAAc;AAAA,IAClB,WAAW,eAAe,KAAK;AAC3B,oBAAc;AAAA,IAClB;AAEA,UAAM,QAAmB;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,IACJ;AAEA,YAAQ,IAAI,KAAK;AAAA,EAErB;AAEA,MAAM,gBAAgB,MAAM,UAAU,kBAAkB,EAAE,KAAK,CAAC,eAAe;AAC3E,YAAQ,IAAI,sBAAsB;AAClC,eAAW,SAAS,WAAW,QAAQ;AACnC,YAAM,QAAQ,MAAM;AACpB,cAAQ,IAAI,KAAK;AACjB,YAAM,SAAsB,EAAE,OAAO,UAAU,CAAC,EAAE;AAElD,UAAI,cAAc,KAAK,GAAG;AACtB,gCAAwB,MAAM;AAAA,MAClC,OACK;AACD,6BAAqB,MAAM;AAAA,MAC/B;AAAA,IACJ;AAAA,EACJ,GAAG,QAAQ,KAAK;AAGhB,MAAM,0BAA0B,CAAC,WAAwB;AACrD,WAAO,MAAM,gBAAgB;AAAA,EACjC;AACA,MAAM,uBAAuB,CAAC,WAAwB;AAClD,WAAO,MAAM,gBAAgB;AAAA,EACjC;AA0DA,gBAAc;",
  "names": []
}
