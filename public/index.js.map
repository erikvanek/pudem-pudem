{
  "version": 3,
  "sources": ["akai-midi-mix.ts", "elektron.ts", "arturia-key-step.ts", "index.ts"],
  "sourcesContent": ["import { InputDevice, Interaction, UserEvent } from './types';\n\nexport type Fader = {\n    controlId: number;\n    min: number;\n    max: number;\n    marker: string;\n};\n\ntype FaderData = {\n    marker: string;\n    id: number;\n};\n\nconst faderData: FaderData[] = [\n    {\n        marker: '1',\n        id: 19,\n    },\n    {\n        marker: '2',\n        id: 23,\n    },\n    {\n        marker: '3',\n        id: 27,\n    },\n    {\n        marker: '4',\n        id: 31,\n    },\n    {\n        marker: '5',\n        id: 49,\n    },\n    {\n        marker: '6',\n        id: 53,\n    },\n    {\n        marker: '7',\n        id: 57,\n    },\n\n    {\n        marker: '8',\n        id: 61,\n    },\n    {\n        marker: 'master',\n        id: 62,\n    },\n];\n\ntype AkaiMidiMix = {\n    faders: Fader[];\n};\n\nconst faders: Fader[] = faderData.map((preset) => ({\n    controlId: preset.id,\n    min: 0,\n    max: 127,\n    marker: preset.marker,\n}));\n\n// todo sortout typings\n// export const AkaiMidiMix: AkaiMidiMix & InputDevice = {\n//     faders\n// }\n\nexport const startLoggingAkaiMidiMix = (device: InputDevice) => {\n    device.input.onmidimessage = onMidiNovationMessage;\n};\n\nconst onMidiNovationMessage: (e: WebMidi.MIDIMessageEvent) => void = (e) => {\n    const [userAction, controlId, value] = e.data;\n    // console.log(e.data)\n    let interaction: Interaction | null = null;\n    if (userAction === 144) {\n        interaction = 'PushDown';\n    } else if (userAction === 128) {\n        interaction = 'PushUp';\n    } else if (userAction === 176) {\n        interaction = 'Tweak';\n    }\n\n    const event: UserEvent = {\n        interaction,\n        controlId,\n        value,\n    };\n    console.log(event);\n};\n\nexport const isAkaiMidiMix = (input: WebMidi.MIDIInput) =>\n    input.name === 'MIDI Mix' && input.manufacturer === 'AKAI';\n", "import { InputDevice, Interaction, UserEvent } from './types';\n\nexport const onElektronMessage: (e: WebMidi.MIDIMessageEvent) => void = (e) => {\n    const [userAction, controlId, value] = e.data;\n    console.log([...e.data]);\n    let interaction: Interaction | null = null;\n    if (userAction === 144) {\n        interaction = 'PushDown';\n    } else if (userAction === 128) {\n        interaction = 'PushUp';\n    } else if (userAction === 176) {\n        interaction = 'Tweak';\n    }\n\n    const event: UserEvent = {\n        interaction,\n        controlId,\n        value,\n    };\n\n    console.log(event);\n};\n\nexport const startLoggingElektron = (device: InputDevice) => {\n    device.input.onmidimessage = onElektronMessage;\n};\n", "import { InputDevice, Interaction, UserEvent } from './types';\n\nexport const isArturiaKeyStep = (input: WebMidi.MIDIInput) =>\n    input.name === 'Arturia KeyStep 32 MIDI 1';\n\nexport const onArturiaMessage: (e: WebMidi.MIDIMessageEvent) => void = (e) => {\n    const [actionByte, controlId, value] = e.data;\n    const timestamp = new Date().getTime();\n    let interaction: Interaction | null = null;\n    if (actionByte === 151) {\n        interaction = 'PushDown';\n    } else if (actionByte === 135) {\n        interaction = 'PushUp';\n    }\n\n    const event: UserEvent = {\n        interaction,\n        controlId,\n        value,\n        timestamp,\n    };\n\n    console.log(event);\n};\n\nexport const startLoggingArturiaKeyStep = (device: InputDevice) => {\n    device.input.onmidimessage = onArturiaMessage;\n};\n", "import { InputDevice } from './types';\nimport { isAkaiMidiMix, startLoggingAkaiMidiMix } from './akai-midi-mix';\nimport { startLoggingElektron } from './elektron';\nimport {\n    isArturiaKeyStep,\n    startLoggingArturiaKeyStep,\n} from './arturia-key-step';\n\nconst runWebMidiApi = () =>\n    navigator.requestMIDIAccess().then((midiAccess) => {\n        console.log('web midi api running');\n        for (const entry of midiAccess.inputs) {\n            const input = entry[1];\n            const device: InputDevice = { input, controls: [] };\n            if (isAkaiMidiMix(input)) {\n                startLoggingAkaiMidiMix(device);\n            } else if (isArturiaKeyStep(input)) {\n                startLoggingArturiaKeyStep(device);\n            } else {\n                startLoggingElektron(device);\n            }\n        }\n    }, console.error);\n\nrunWebMidiApi();\n"],
  "mappings": "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",
  "names": []
}
